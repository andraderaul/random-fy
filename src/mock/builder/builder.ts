import { build, fake } from '@jackfranklin/test-data-bot'
import {
  Artist,
  Recommendation,
  Image,
  Track,
  Playlist,
  RefreshToken
} from 'types'

export const imageBuilder = build<Image>('image', {
  fields: {
    height: fake((f) => f.datatype.number()),
    url: fake((f) => f.image.imageUrl()),
    width: fake((f) => f.datatype.number())
  }
})

export const imagesBuilder = build<Array<Image>>('images', {
  fields: [],
  postBuild: () =>
    Array(3)
      .fill(undefined)
      .map(() => imageBuilder())
})

export const trackBuilder = build<Track>('track', {
  fields: {
    id: fake((f) => f.datatype.uuid()),
    uri: fake((f) => f.image.dataUri()),
    images: imagesBuilder(),
    name: fake((f) => f.name.firstName()),
    previewUrl: fake((f) => f.image.imageUrl()),
    hrefSpotify: fake((f) => f.internet.url())
  }
})

export const tracksBuilder = build<Array<Track>>('tracks', {
  fields: [],
  postBuild: () =>
    Array(20)
      .fill(undefined)
      .map(() => trackBuilder())
})

export const recommendationBuilder = build<Recommendation>('recommendation', {
  fields: {
    id: fake((f) => f.datatype.uuid()),
    images: imagesBuilder(),
    popularity: fake((f) => f.datatype.number(100)),
    type: fake((f) => f.random.word()),
    name: fake((f) => f.name.findName()),
    track: trackBuilder()
  }
})

export const recommendationsBuilder = build<Array<Recommendation>>(
  'recommendations',
  {
    fields: [],
    postBuild: () =>
      Array(20)
        .fill(undefined)
        .map(() => recommendationBuilder())
  }
)

export const artistBuilder = build<Artist>('artist', {
  fields: {
    external_urls: {
      spotify: fake((f) => f.internet.url())
    },
    followers: {
      href: fake((f) => f.internet.url()),
      total: fake((f) => f.datatype.number())
    },
    genres: fake((f) => f.datatype.array()),
    href: fake((f) => f.internet.url()),
    id: fake((f) => f.datatype.uuid()),
    images: imagesBuilder(),
    name: fake((f) => f.name.firstName()),
    popularity: fake((f) => f.datatype.number()),
    type: fake((f) => f.random.word()),
    uri: fake((f) => f.image.dataUri())
  }
})

export const artistsBuilder = build<Array<Artist>>('artists', {
  fields: [],
  postBuild: () =>
    Array(20)
      .fill(undefined)
      .map(() => artistBuilder())
})

export const playlistBuilder = build<Playlist>('playlist', {
  fields: {
    id: fake((f) => f.datatype.uuid()),
    name: 'random-fy',
    description:
      'playlist generated by randomfy. Url: https://random-fy.vercel.app/',
    uri: fake((f) => f.image.dataUri())
  }
})

export const refreshTokenBuilder = build<RefreshToken>('refreshToken', {
  fields: {
    accessToken: fake((f) => f.internet.password())
  }
})
